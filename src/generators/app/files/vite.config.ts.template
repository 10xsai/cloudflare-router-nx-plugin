/// <reference types='vitest' />
import path from 'path';
import { defineConfig } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';

import { cloudflare } from '@cloudflare/vite-plugin';
import { reactRouter } from '@react-router/dev/vite';
<% if (style === 'tailwind') { %>import tailwindcss from '@tailwindcss/vite';<% } %>

declare module "@react-router/cloudflare" {
  interface AppLoadContext {
    // define your CloudFlare bindings context
    cloudflare: {
      env: {
        // KV?: KVNamespace;
        // DO?: DurableObjectNamespace;
        // [key: string]: unknown;
      };
    };
  }
}

export default defineConfig(() => ({
  root: __dirname,
  cacheDir: '<%= offsetFromRoot %>node_modules/.vite/<%= projectRoot %>',
  server: {
    port: 3000,
  },
  preview: {
    port: 4300,
  },
  plugins: [
    cloudflare({ viteEnvironment: { name: "ssr" } }),<% if (style === 'tailwind') { %>
    tailwindcss(),<% } %>
    !process.env.VITEST && reactRouter(),
    tsconfigPaths(),
  ],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: './dist',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
  ssr: {
    resolve: {
      externalConditions: ["workerd", "worker"],
    },
  },
})); 