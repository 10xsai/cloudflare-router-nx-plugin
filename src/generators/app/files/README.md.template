# <%= className %>

A React Router v7 application optimized for Cloudflare Workers deployment.

## Features

- 🚀 **React Router v7** - Framework mode with file-based routing
- ⚡ **Server-Side Rendering** - Built-in SSR support
- ☁️ **Cloudflare Workers** - Optimized for edge deployment
- 🎯 **Type-Safe Routes** - Automatic TypeScript type generation
<% if (style === 'tailwind') { %>- 🎨 **Tailwind CSS** - Utility-first CSS framework<% } else { %>- 🎨 **CSS Styling** - Modern CSS with utility classes<% } %>
- 🛠️ **Development Tools** - Hot module replacement and dev server
- 🔍 **ESLint** - Pre-configured linting with Nx and React rules

## Getting Started

### Prerequisites

- Node.js 20 or higher
- npm, pnpm, or yarn

### Installation

```bash
npm install
# or
pnpm install
# or
yarn install
```

### Development

Start the development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```

Your application will be available at `http://localhost:3000`.

### Building

Build for production:

```bash
npm run build
# or
pnpm build
# or
yarn build
```

### Type Checking

Run TypeScript type checking:

```bash
npm run typecheck
# or
pnpm typecheck
# or
yarn typecheck
```

Generate route types:

```bash
npm run typegen
# or
pnpm typegen
# or
yarn typegen
```

### Linting

Lint your code:

```bash
npm run lint
# or
pnpm lint
# or
yarn lint
```

Lint and fix issues automatically:

```bash
npm run lint:fix
# or
pnpm lint:fix
# or
yarn lint:fix
```

## Deployment

### Cloudflare Setup

1. **Install Wrangler CLI** (if not already installed):
   ```bash
   npm install -g wrangler
   ```

2. **Authenticate with Cloudflare**:
   ```bash
   wrangler auth login
   ```

3. **Configure your deployment** in `wrangler.jsonc`:
   - Update the `name` field with your project name
   - Set your `account_id`
   - Configure any required bindings (KV, D1, R2, etc.)

### Deploy to Production

```bash
npm run deploy
# or
pnpm deploy
# or
yarn deploy
```

### Deploy to Staging

```bash
npm run deploy:staging
# or
pnpm deploy:staging
# or
yarn deploy:staging
```

## Project Structure

```
<%= projectName %>/
├── app/                          # React Router v7 app directory
│   ├── root.tsx                  # Root layout component
│   ├── routes/                   # File-based routes
│   │   ├── _index.tsx           # Home page (/)
│   │   └── about.tsx            # About page (/about)
<% if (style === 'tailwind') { %>│   └── tailwind.css             # Tailwind CSS<% } else { %>│   └── root.css                 # Root CSS<% } %>
├── public/                       # Static assets
├── build/                        # Build output (generated)
├── wrangler.jsonc               # Cloudflare configuration
├── eslint.config.mjs            # ESLint configuration
├── react-router.config.ts        # React Router configuration
├── vite.config.ts               # Vite configuration
└── package.json                  # Dependencies and scripts
```

## Code Quality

### ESLint Configuration

The project includes ESLint configuration that extends:
- Base workspace ESLint rules
- Nx React-specific rules
- Custom project rules

You can customize the ESLint rules by editing `eslint.config.mjs`:

```javascript
export default [
    ...baseConfig,
    ...nx.configs["flat/react"],
    {
        files: [
            "**/*.ts",
            "**/*.tsx",
            "**/*.js",
            "**/*.jsx"
        ],
        rules: {
            // Add your custom rules here
            "@typescript-eslint/no-unused-vars": "error",
            "react/prop-types": "off",
        }
    }
];
```

## Adding Routes

Create new routes by adding files to the `app/routes/` directory:

- `app/routes/products.tsx` → `/products`
- `app/routes/products.$id.tsx` → `/products/:id`
- `app/routes/blog._index.tsx` → `/blog`
- `app/routes/blog.$slug.tsx` → `/blog/:slug`

Each route can export:

```typescript
import type { MetaFunction, LoaderFunction } from "react-router";

// Page metadata
export const meta: MetaFunction = () => [
  { title: "My Page" },
  { name: "description", content: "Page description" }
];

// Server-side data loading
export const loader: LoaderFunction = async ({ params }) => {
  return { data: await fetchData(params.id) };
};

// The page component
export default function MyPage() {
  const { data } = useLoaderData();
  return <div>{data.title}</div>;
}
```

## Environment Variables

Add environment variables to your `wrangler.jsonc`:

```jsonc
{
  "vars": {
    "API_URL": "https://api.example.com",
    "NODE_ENV": "development"
  },
  "env": {
    "production": {
      "vars": {
        "API_URL": "https://api.production.com",
        "NODE_ENV": "production"
      }
    }
  }
}
```

## Cloudflare Bindings

Add Cloudflare bindings to your `wrangler.jsonc`:

### KV Storage

```jsonc
{
  "kv_namespaces": [
    {
      "binding": "MY_KV",
      "id": "your-kv-namespace-id",
      "preview_id": "your-preview-kv-namespace-id"
    }
  ]
}
```

### D1 Database

```jsonc
{
  "d1_databases": [
    {
      "binding": "DB",
      "database_name": "my-database",
      "database_id": "your-database-id",
      "preview_database_id": "your-preview-database-id"
    }
  ]
}
```

### R2 Storage

```jsonc
{
  "r2_buckets": [
    {
      "binding": "MY_BUCKET",
      "bucket_name": "my-bucket",
      "preview_bucket_name": "my-bucket-preview"
    }
  ]
}
```

## Available Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run typecheck` - Run TypeScript type checking
- `npm run typegen` - Generate route types
- `npm run lint` - Lint code
- `npm run lint:fix` - Lint and fix issues
- `npm run deploy` - Deploy to production
- `npm run deploy:staging` - Deploy to staging

## Learn More

- [React Router v7 Documentation](https://reactrouter.com)
- [Cloudflare Workers Documentation](https://developers.cloudflare.com/workers/)
<% if (style === 'tailwind') { %>- [Tailwind CSS Documentation](https://tailwindcss.com/docs)<% } %>
- [TypeScript Documentation](https://www.typescriptlang.org/docs/)
- [ESLint Documentation](https://eslint.org/docs/)

## Contributing

This project was generated with [@cloudflare-router/nx-plugin](https://github.com/your-org/cloudflare-router-nx-plugin).

Feel free to customize and extend it for your needs! 